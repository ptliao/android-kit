apply from: "z_gradle/dependencies_app.gradle"

def versions = [
        kotlin          : "1.3.72",
        support         : "1.1.0",
        lifecycleVersion: '2.2.0'
]

def builds = [
        buildToolsVersion: "29.0.3",
        minSdkVersion    : 21,
        compileSdkVersion: 29,
        targetSdkVersion : 29,
]

def android = [
        androidxCore      : "androidx.core:core:${versions.support}",
        appcompat         : "androidx.appcompat:appcompat:${versions.support}",
        recyclerview      : "androidx.recyclerview:recyclerview:${versions.support}",
        constraintLayout  : "androidx.constraintlayout:constraintlayout:1.1.3",

        lifecycleViewmodel: "androidx.lifecycle:lifecycle-viewmodel-ktx:${versions.lifecycleVersion}",
        lifecycleLivedata : "androidx.lifecycle:lifecycle-livedata-ktx:${versions.lifecycleVersion}",
        lifecycleRuntime  : "androidx.lifecycle:lifecycle-runtime-ktx:${versions.lifecycleVersion}",
        lifecycleCompiler : "androidx.lifecycle:lifecycle-compiler:${versions.lifecycleVersion}",

        coordinatorlayout : "androidx.coordinatorlayout:coordinatorlayout:1.1.0",
        material          : 'com.google.android.material:material:1.0.0',

        startupRuntime    : 'androidx.startup:startup-runtime:1.0.0-alpha02'
]

def kotlin = [
        reflect        : "org.jetbrains.kotlin:kotlin-reflect:${versions.kotlin}",
        stdLib         : "org.jetbrains.kotlin:kotlin-stdlib-jdk7:${versions.kotlin}",
        androidxKtxCore: "androidx.core:core-ktx:1.3.1",
]

def vendor = [
        androidPlugin           : "com.android.tools.build:gradle:4.0.1",
        kotlinPlugin            : "org.jetbrains.kotlin:kotlin-gradle-plugin:${versions.kotlin}",

        glide                   : "com.github.bumptech.glide:glide:4.8.0",
        glideCompiler           : "com.github.bumptech.glide:compiler:4.8.0",

        androidtiffbitmapfactory: "com.github.beyka:androidtiffbitmapfactory:0.9.8.7",

        retrofit                : "com.squareup.retrofit2:retrofit:2.5.0",
        retrofitAdapter         : "com.squareup.retrofit2:adapter-rxjava2:2.5.0",
        retrofitLogging         : "com.squareup.okhttp3:logging-interceptor:3.9.0",

        xlog                    : "com.tencent.mars:mars-xlog:1.2.4",

        greendao                : "org.greenrobot:greendao:3.2.2",
        greendaoSqlcipher       : 'net.zetetic:android-database-sqlcipher:4.2.0',

        smartRefreshLayout      : 'com.scwang.smartrefresh:SmartRefreshLayout:1.0.5.1',

        photoView               : 'com.github.chrisbanes:PhotoView:2.0.0',

        liveEventBus            : 'com.jeremyliao:live-event-bus:1.5.1',

        rxandroid               : 'io.reactivex.rxjava2:rxandroid:2.0.2',
        rxjava2                 : 'io.reactivex.rxjava2:rxjava:2.1.12',

        x5webview               : "com.tencent.tbs.tbssdk:sdk:43697",

        gson                    : 'com.google.code.gson:gson:2.8.2',

        // TODO 这个版本可以升级，一些优化方法没有release
        wmRouter                : 'com.sankuai.waimai.router:router:1.2.0',
        wmRouterCompiler        : 'com.sankuai.waimai.router:compiler:1.2.0',
        wmRouterPlugin          : 'com.sankuai.waimai.router:plugin:1.2.0',

        leakcanary              : 'com.squareup.leakcanary:leakcanary-android:2.4',

        autosize                : 'me.jessyan:autosize:1.2.1',
]

def test = [
        junit   : "junit:junit:4.12",
        runner  : "androidx.test.ext:junit:1.1.1",
        espresso: "androidx.test.espresso:espresso-core:3.2.0"
]

def libs = android + kotlin + vendor + test

def gradleConfig = [
        repositories         : {
            maven { url deps.maven.SNAPSHOT_REPOSITORY_URL }
            maven { url deps.maven.RELEASE_REPOSITORY_URL }
            maven { url "http://maven.aliyun.com/nexus/content/groups/public/" }
            maven { url "https://jitpack.io" }
            google()
            jcenter()
        },
        simpleAndroid        : { targetProject ->
            targetProject.android {
                compileSdkVersion deps.builds.compileSdkVersion

                defaultConfig {
                    minSdkVersion deps.builds.minSdkVersion
                    targetSdkVersion deps.builds.targetSdkVersion
                    versionCode 1
                    versionName depsApp.findVersionNameByModuleName(targetProject.getName()) ?: "1.0.0.0-notfound"

                    testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

                    proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'

                    consumerProguardFiles 'proguard-rules.pro'

                    ndk {
                        abiFilters "armeabi-v7a"
                    }
                }

                sourceSets {
                    main {
                        java {
                            include '**/*.java'
                            include '**/*.kt'
                        }
                    }
                }

                compileOptions {
                    sourceCompatibility 1.8
                    targetCompatibility 1.8
                }

                if (targetProject.getPlugins().findPlugin("com.android.library")) {
                    // packageBuildConfig(false)
                } else if (targetProject.getPlugins().findPlugin("com.android.application")) {
                    //如果存在签名文件，则加入签名文件处理
                    File file = new File(targetProject.getProjectDir(), "../z_raw/dev.jks")
                    if (file.exists()) {
                        signingConfigs {
                            dev {
                                keyAlias 'key0'
                                keyPassword 'hc@nYz_3'
                                storeFile file
                                storePassword 'hc@nYz_3'
                            }
                        }

                        buildTypes {
                            debug {
                                signingConfig signingConfigs.dev
                            }

                            release {
                                signingConfig signingConfigs.dev

                                // debuggable true
                                minifyEnabled true
                                shrinkResources true
                                zipAlignEnabled true
                            }
                        }
                    } else {
                        println("未配置dev keystore，请将dev.jks放置到${file.absolutePath}")
                    }
                }
            }
        },
        simpleDependencies   : { targetProject, params = [] ->
            params = [includeTest: true] + params

            targetProject.dependencies {
                // libs
                implementation fileTree(dir: "libs", include: ["*.jar"])

                // kotlin
                implementation deps.libs.stdLib
                implementation deps.libs.androidxKtxCore

                // test
                if (params.includeTest) {
                    testImplementation deps.libs.junit
                    androidTestImplementation deps.libs.runner
                    androidTestImplementation deps.libs.espresso
                }
            }
        },
        simpleModule         : { targetProject, params = [] ->
            params = [isApplication: false, includeTest: true] + params

            targetProject.apply plugin: params.isApplication ? 'com.android.application' : 'com.android.library'
            targetProject.apply plugin: 'kotlin-android'
            targetProject.apply plugin: 'kotlin-android-extensions'

            deps.gradleConfig.simpleAndroid(targetProject)
            deps.gradleConfig.simpleDependencies(targetProject, [includeTest: params.includeTest])
        },
        simpleWHRouter       : { targetProject, params = [] ->
            params = [includeCompiler: true, includeLib: true] + params

            if (targetProject.getPlugins().findPlugin("com.android.application")) {
                targetProject.apply plugin: 'WMRouter'
            }

            if (params.includeCompiler) {
                if (!targetProject.getPlugins().findPlugin("kotlin-kapt")) {
                    targetProject.apply plugin: 'kotlin-kapt'
                }

                targetProject.dependencies {
                    kapt deps.libs.wmRouterCompiler
                }
            }

            if (params.includeLib) {
                targetProject.dependencies {
                    implementation deps.libs.wmRouter
                }
            }
        },
        simpleMavenPublishing: { targetProject ->
            targetProject.apply from: "$rootDir/z_gradle/maven_publishing.gradle"
        }
]

def maven = [
        SNAPSHOT_REPOSITORY_URL: "$rootDir/repo/snapshot",
        RELEASE_REPOSITORY_URL : "$rootDir/repo/release"
]

ext.deps = [
        "builds"      : builds,
        "libs"        : libs,
        "gradleConfig": gradleConfig,
        "maven"       : maven
]