def defaultGroupId = "com.hcanyz.android_kit"

static def moduleVersion(module, version = "1.0.0.0-SNAPSHOT") {
    return "$module:$version"
}

def module = [
        module_template    : moduleVersion("$defaultGroupId:module_template"),
        module_template_api: moduleVersion("$defaultGroupId:module_template_api"),
]
def vendor = [
        vendor_log   : "$defaultGroupId:vendor_log:1.0.0.0-SNAPSHOT",
        vendor_config: "$defaultGroupId:vendor_config:1.0.0.0-SNAPSHOT",
]
def widget = [
        widget_res: "$defaultGroupId:widget_res:1.0.0.0-SNAPSHOT",
]

def tool = [
        findVersionNameByModuleName: { String moduleName ->
            String moduleStr = (module + vendor + widget).get(moduleName)
            if (moduleStr == null) {
                getLogger().log(LogLevel.WARN, "findVersionName:moduleName:${moduleName},not found,maybe error")
                return null
            }
            String[] moduleSplit = moduleStr.split(":")
            // group:artifact:version
            if (moduleSplit && moduleSplit.length == 3) {
                getLogger().log(LogLevel.LIFECYCLE, "findVersionName:moduleName:${moduleName},finded:${moduleSplit[2]}")
                return moduleSplit[2]
            }
            getLogger().log(LogLevel.WARN, "findVersionName:moduleName:${moduleName},not found,maybe error")
            return null
        },
        includeDynamic             : { aware, gradle, settings ->
            aware.apply from: "z_gradle/dynamic_include_module.gradle"

            invalidChangingModuleCache(gradle)
            includeDynamic(gradle, settings, [
                    [module   : "$defaultGroupId:module_template", project: ":module_template",
                     localPath: "module_template/p_main", mode: "module2project"],
                    [module   : "$defaultGroupId:module_template_api", project: ":module_template_api",
                     localPath: "module_template/api", mode: "module2project"],

                    [module   : "$defaultGroupId:vendor_log", project: ":vendor_log",
                     localPath: "vendors/vendor_log", mode: "module2project"],
                    [module   : "$defaultGroupId:vendor_config", project: ":vendor_config",
                     localPath: "vendors/vendor_config", mode: "module2project"],

                    [module   : "$defaultGroupId:widget_res", project: ":widget_res",
                     localPath: "widgets/widget_res", mode: "module2project"],
            ])
        }
]

def all = module + vendor + widget + tool

ext.depsApp = all